name: cisTEM CI

on:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  build:
    continue-on-error: false
    strategy:
      fail-fast: true
      matrix:
        compiler: [icpc,gcc,clang]
        include:
          - compiler: icpc
            cxx: icpc
            cc: icc
            config_options: "--enable-staticmode --enable-openmp --enable-experimental --enable-samples --with-wx-config=/opt/WX/intel-static/bin/wx-config"
            source_cmd: ". /opt/intel/oneapi/setvars.sh"
          - compiler: gcc
            cxx: g++
            cc: gcc
            config_options: "--enable-staticmode --enable-openmp --enable-experimental --enable-samples  --with-wx-config=wx-config"
            source_cmd: ""
          - compiler: clang
            cxx: clang++
            cc: clang
            config_options: "--enable-experimental --enable-samples  --with-wx-config=wx-config"
            source_cmd: ""
          
    runs-on: ubuntu-latest
    container: cistemdashorg/cistem_build_env:ci_${{ matrix.compiler }}
    outputs:
      version: ${{ steps.configure.outputs.version }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: regenerate_project
      run: ./regenerate_project.b

    - name: configure
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        mkdir -p build/${{ matrix.compiler }} 
        cd build/${{ matrix.compiler }} 
        echo $CC
        echo $CXX
        ${{ matrix.source_cmd }}
        ../../configure ${{matrix.config_options}}
        VERSION=$(cat config.log | grep CISTEM_VERSION_TEXT | cut -d' ' -f3 | tr -d '"')
        echo "::set-output name=version::$VERSION" 
    - name: make 
      run: |
        ${{ matrix.source_cmd }}
        cd build/${{ matrix.compiler }}
        make -j2
        cp ../../scripts/testing/test_and_benchmark.sh src/
    - name: clean up
      run: |
        cd build/${{ matrix.compiler }}
        rm -r src/core
        rm -r src/gui
        rm -r src/programs
    - name: Create binary artifact
      uses: actions/upload-artifact@v2
      with: 
        name: cistem_binaries_${{ matrix.compiler }}
        path: build/${{ matrix.compiler }}/src

  console_test:
    strategy:
      fail-fast: true
      matrix:
        compiler: [icpc,gcc,clang]
    name: Console test
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: cistem_binaries_${{ matrix.compiler }}
    - name: Install fftw3
      if: ${{ matrix.compiler=='gcc' || matrix.compiler=='clang' }}
      run: sudo apt-get install -y libfftw3-dev
    - name: Fix permissions
      run: chmod +x *
    - name: test console_test
      continue-on-error: false
      run: ./console_test 
    - name: run benchmark
      run: ./test_and_benchmark.sh ./
    - name: Create image artifact
      uses: actions/upload-artifact@v2
      with: 
        name: test_images
        path: /tmp/*.mrc

  samples_functional_testing:
    strategy:
      fail-fast: true
      matrix:
        compiler: [icpc,gcc,clang]
    name: Samples functional testing
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: cistem_binaries_${{ matrix.compiler }}
    - name: Install fftw3
      if: ${{ matrix.compiler=='gcc' || matrix.compiler=='clang' }}
      run: sudo apt-get install -y libfftw3-dev 
    - name: test samples_functional_testing
      continue-on-error: false
      run: |
        chmod +x samples_functional_testing
        ./samples_functional_testing

  unit_tests:
    strategy:
      fail-fast: true
      matrix:
        compiler: [icpc,gcc,clang]
    name: Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: cistem_binaries_${{ matrix.compiler }}
    - name: Install fftw3
      if: ${{ matrix.compiler=='gcc' || matrix.compiler=='clang' }}
      run: sudo apt-get install -y libfftw3-dev 
    - name: run unit tests
      continue-on-error: false
      run: |
        chmod +x unit_test_runner
        ./unit_test_runner


