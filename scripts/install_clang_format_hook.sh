#!/bin/bash
# Install clang-format-14 pre-commit hook for cisTEM development
# This script should be run from the project root or called by regenerate_containers.sh

set -e

# Find git directory (handles both regular repos and worktrees)
GIT_DIR=$(git rev-parse --git-dir)
HOOKS_DIR="$GIT_DIR/hooks"

# For worktrees, git hooks go in the main repo's hooks directory
if [[ "$GIT_DIR" == *"/worktrees/"* ]]; then
    # Extract main repo path from worktree git dir
    MAIN_GIT_DIR=$(echo "$GIT_DIR" | sed 's|/\.git/worktrees/.*|/.git|')
    HOOKS_DIR="$MAIN_GIT_DIR/hooks"
fi

echo "Installing clang-format-14 pre-commit hook to: $HOOKS_DIR"

# Create hooks directory if it doesn't exist
mkdir -p "$HOOKS_DIR"

# Create pre-commit hook for clang-format checking
cat > "$HOOKS_DIR/pre-commit" << 'EOF'
#!/bin/bash
# Pre-commit hook to check C++ file formatting with clang-format-14
# This hook checks if staged C++ files are properly formatted according to .clang-format

# Find the project root (where .clang-format is located)
PROJECT_ROOT=$(git rev-parse --show-toplevel)
CLANG_FORMAT="clang-format-14"

# Check if clang-format-14 is available
if ! command -v $CLANG_FORMAT &> /dev/null; then
    echo "Error: clang-format-14 not found in PATH"
    echo "Please install clang-format-14 or update the pre-commit hook"
    exit 1
fi

# Check if .clang-format exists
if [ ! -f "$PROJECT_ROOT/.clang-format" ]; then
    echo "Warning: .clang-format not found in project root"
    echo "Skipping format check"
    exit 0
fi

# Function to check if file should be excluded from formatting
should_exclude_file() {
    local file="$1"

    # Exclude files in include/ directory (third-party headers)
    if [[ "$file" == include/* ]]; then
        return 0
    fi

    # Exclude files in src/gui/wxformbuilder (input .fbp files)
    if [[ "$file" == src/gui/wxformbuilder/* ]]; then
        return 0
    fi

    # Exclude files with ProjectX_gui in the name (generated by wxFormBuilder)
    if [[ "$file" == *ProjectX_gui*.cpp ]] || [[ "$file" == *ProjectX_gui*.h ]]; then
        return 0
    fi

    # Check file header for wxFormBuilder warning
    if [ -f "$file" ]; then
        if head -n 10 "$file" | grep -q "PLEASE DO \*NOT\* EDIT THIS FILE\|DO NOT EDIT THIS FILE\|Generated by wxFormBuilder"; then
            return 0
        fi
    fi

    return 1
}

# Get list of staged C++ and CUDA files (excluding deleted files)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(cpp|h|cc|cxx|hpp|cu|cuh)$' || true)

if [ -z "$STAGED_FILES" ]; then
    # No C++ files staged, nothing to check
    exit 0
fi

echo "Checking formatting of staged C++ and CUDA files..."

FORMAT_ISSUES=()
TEMP_DIR=$(mktemp -d)

# Check each staged file
while IFS= read -r file; do
    # Skip excluded files
    if should_exclude_file "$file"; then
        echo "  Skipping (excluded): $file"
        continue
    fi

    if [ -f "$file" ]; then
        # Get the formatted version
        $CLANG_FORMAT "$file" > "$TEMP_DIR/$(basename $file).formatted"

        # Compare with staged version
        git show ":$file" > "$TEMP_DIR/$(basename $file).staged"

        if ! diff -q "$TEMP_DIR/$(basename $file).staged" "$TEMP_DIR/$(basename $file).formatted" > /dev/null 2>&1; then
            FORMAT_ISSUES+=("$file")
        fi
    fi
done <<< "$STAGED_FILES"

# Clean up temp directory
rm -rf "$TEMP_DIR"

# Report results
if [ ${#FORMAT_ISSUES[@]} -gt 0 ]; then
    echo ""
    echo "ERROR: The following files have formatting issues:"
    for file in "${FORMAT_ISSUES[@]}"; do
        echo "  - $file"
    done
    echo ""

    # Create a convenience script to fix all issues
    FIX_SCRIPT="/tmp/fix_formatting_$(date +%s).sh"
    cat > "$FIX_SCRIPT" << 'FIXEOF'
#!/bin/bash
# Auto-generated script to fix formatting issues
# Generated by pre-commit hook
set -e

echo "Formatting files with clang-format-14..."

FIXEOF

    for file in "${FORMAT_ISSUES[@]}"; do
        echo "clang-format-14 -i \"$file\"" >> "$FIX_SCRIPT"
    done

    cat >> "$FIX_SCRIPT" << 'FIXEOF'

echo ""
echo "Files formatted successfully. Now staging changes..."
FIXEOF

    for file in "${FORMAT_ISSUES[@]}"; do
        echo "git add \"$file\"" >> "$FIX_SCRIPT"
    done

    cat >> "$FIX_SCRIPT" << 'FIXEOF'

echo ""
echo "All files formatted and staged. You can now commit."
FIXEOF

    chmod +x "$FIX_SCRIPT"

    echo "A convenience script has been created to fix all formatting issues:"
    echo "  $FIX_SCRIPT"
    echo ""
    echo "Run it with:"
    echo "  $FIX_SCRIPT"
    echo ""
    echo "Or format files manually:"
    echo "  clang-format-14 -i <file>"
    echo "  git add <file>"
    echo ""
    exit 1
fi

echo "All staged C++ and CUDA files are properly formatted."
exit 0
EOF

# Make the hook executable
chmod +x "$HOOKS_DIR/pre-commit"

echo "clang-format-14 pre-commit hook installed successfully!"
